* 탐욕법 - 매 순간에 최적의 값을 택하여 최종 해답까지 도출해 나가는 방법. 
           그렇다고 해서 최종 해답이 늘 최적화 된 것을 보장할 수는 없다. 
           어느 정도 최적에 가까운 답을 빠른 속도로 찾아낸다는 장점이 있을 뿐이다. 
           
           그렇다면 어떤 경우의 문제를 이 알고리즘을 적용시켜 풀어 볼 수있을까? 
           전제는 큰 문제를 작은 sub 문제로 쪼개어 푸는 문제이다.
           또한 매 순간 답을 택할 때의 기준 혹은 우선순위를 정한다. 
           마지막으로 최종 해답이 최적화됨이 보장되는지 혹은 그렇지않아도 무방한 문제인지 여부를 파악한다. 
           
 아래와 같은 예시를 살펴보면,
 /**************************************************
 문제 설명
점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 
다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 
학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.

전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요. 출처:[프로그래머스 체육복문제]
                                                     **************************************************************/
                                                     
매 순간의 (특정 학생이 어떠한 학생집합에서 체육복 빌릴 학생을 고르는 경우) 최선책은 (조건 해당하는 학생이 있으면 바로 옷 빌림) 
결국 최종 해답의 최선책이 된다 (최대한 많은 학생이 많이 빌리게됨). 

만약 , 주어진 문제에서 "바로 앞번호 학생 , 바로 뒷번호 학생" 등의 제약 조건이 바뀌게 되어 학생 순서가 고려 대상이 된다면, 
탐욕법으로 문제 해결이 불가해진다.




소스코드
def solution(n, lost, reserve):
    lost.sort()
    
    reserve.sort()
    l = len(lost)
    ok = 0
    tmp = lost[:]
    for i in lost : 
        if i in reserve : 
            ok += 1
            reserve.remove(i)
            tmp.remove(i)
    lost = tmp[:]      
  
    for i in lost : 
        if len(reserve) == 0 : return n-l+ok
        
        else :
            for j in range(0,len(reserve)) : 
                if abs(reserve[j]-i)==1 : 
                    ok += 1
                    reserve.pop(j)
                    break 
     
    return n-l+ok
